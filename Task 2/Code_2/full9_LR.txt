Start reading data: 
 Time elapsed: 0:00:00.000160
Done reading data: 
 Time elapsed: 0:00:04.015201 

sizes: 
 train features: 		 (18995, 35) <class 'pandas.core.frame.DataFrame'> 
 train labels (sepsis) : 	 (18995, 1) <class 'pandas.core.frame.DataFrame'> 
 test features: 		 (151968, 35) <class 'pandas.core.frame.DataFrame'>

Start Scaling data: 
 Time elapsed: 0:00:04.015259
Done Scaling data: 
 Time elapsed: 0:00:04.575433 

df train features after scaling: 
,          2       3       4       5   ...     33     34       35     36
0      34.0  33.239  35.762  16.733  ...  1.831  6.962  114.500  7.372
1      71.0  32.833  41.767  22.856  ...  1.557  6.735  132.084  7.377
2      68.0  32.465  39.885  22.707  ...  1.691  7.169  117.390  7.366
3      79.0  31.952  37.186  22.813  ...  1.606  6.982  140.390  7.364
4      76.0  33.368  34.386  24.110  ...  1.638  7.190  123.032  7.377
...     ...     ...     ...     ...  ...    ...    ...      ...    ...
18990  80.0  32.780  45.140  25.182  ...  1.415  7.879  101.643  7.370
18991  73.0  32.572  39.875  27.437  ...  1.621  7.259  175.428  7.371
18992  53.0  32.836  40.483  19.633  ...  1.708  7.198   99.250  7.381
18993  89.0  32.878  40.576  26.562  ...  1.604  6.387  130.956  7.371
18994  85.0  32.441  43.421  27.127  ...  1.563  7.425  127.761  7.374

[18995 rows x 35 columns]

df train labels sepsis after scaling: 
       LABEL_Sepsis
0               0.0
1               0.0
2               0.0
3               0.0
4               0.0
...             ...
18990           0.0
18991           0.0
18992           0.0
18993           0.0
18994           0.0

[18995 rows x 1 columns]

sizes: 
 X train: 	 (18995, 35) <class 'numpy.ndarray'> 
 X test: 	 (151968, 35) <class 'numpy.ndarray'> 
 Y train: 	 (18995,) <class 'numpy.ndarray'>
grid: 
 GridSearchCV(estimator=LogisticRegression(), n_jobs=2,
             param_grid={'C': [0.1, 1, 10],
                         'max_iter': array([ 100.,  200.,  300.,  400.,  500.,  600.,  700.,  800.,  900.,
       1000.]),
                         'penalty': ['l2'],
                         'solver': ['liblinear', 'newton-cg']},
             scoring='roc_auc')
Start fitting Grid Search CV: 
 Time elapsed: 0:00:04.669664
Fitting...
Done fitting Grid Search CV: 
 Time elapsed: 0:03:05.325084

Grid Search Best Score: 
 0.6035852136788037
Grid Search Best Estimator: 
 LogisticRegression(C=0.1, max_iter=100.0, solver='liblinear')
Grid Search Best Estimator: 
 LogisticRegression(C=0.1, max_iter=100.0, solver='liblinear')

Grid Search all CV Results: 
 {'mean_fit_time': array([1.44253564, 1.73159375, 1.12420726, 1.76829143, 0.82561293,
       1.24643383, 0.58737583, 0.8421824 , 0.60275078, 1.39208584,
       0.86482987, 0.97988915, 0.52267537, 0.85974584, 0.75383611,
       1.17338743, 0.45028906, 1.83069744, 0.50469103, 0.72653222,
       0.6609324 , 1.11841269, 0.58799396, 1.06864629, 0.72637687,
       1.60875177, 0.59326916, 1.06762648, 0.605441  , 1.12112198,
       0.57676001, 1.06935859, 0.57949462, 1.02503576, 0.77590723,
       3.21884184, 0.76933355, 1.016189  , 0.57087913, 1.82250376,
       0.69117198, 1.19943166, 0.76148152, 1.23291111, 0.72899423,
       1.18606286, 0.7331542 , 1.20128827, 0.67240272, 2.9751462 ,
       1.49122739, 2.37320485, 0.96776834, 1.37938309, 0.97648597,
       1.12951112, 0.66392517, 1.55978708, 0.6767406 , 2.10946617]), 'std_fit_time': array([0.06801826, 0.34517406, 0.41438009, 0.54284977, 0.25063335,
       0.23597248, 0.1378285 , 0.0487882 , 0.0606065 , 0.06162754,
       0.22047972, 0.13202305, 0.05932136, 0.07788513, 0.30617884,
       0.39706303, 0.08729985, 0.63873855, 0.18806178, 0.08734746,
       0.1423049 , 0.09818084, 0.10798197, 0.06444735, 0.22486017,
       0.73311339, 0.07731048, 0.09120276, 0.11671936, 0.11318132,
       0.09771921, 0.05838797, 0.10467592, 0.03203879, 0.32587928,
       1.0540472 , 0.084342  , 0.04062066, 0.10970833, 0.58323084,
       0.12771855, 0.15149183, 0.11957485, 0.14693317, 0.06643289,
       0.1588282 , 0.04395779, 0.11822511, 0.0896815 , 0.42331254,
       0.34530691, 0.64538772, 0.22206074, 0.11362759, 0.07135609,
       0.14415472, 0.14376433, 0.1191488 , 0.08416382, 0.43060155]), 'mean_score_time': array([0.00806618, 0.01338239, 0.02046437, 0.0203826 , 0.0082799 ,
       0.0050508 , 0.01244812, 0.00545936, 0.00886703, 0.01342769,
       0.01400638, 0.01321421, 0.0106657 , 0.00915709, 0.01550107,
       0.00722928, 0.00629516, 0.00608258, 0.01069417, 0.00597696,
       0.00379195, 0.00552349, 0.00702457, 0.01115017, 0.00790906,
       0.0076828 , 0.00437741, 0.00477643, 0.00406623, 0.00664673,
       0.00577455, 0.00482225, 0.00688887, 0.0084322 , 0.00430841,
       0.01721148, 0.0059238 , 0.00501337, 0.00687809, 0.01845479,
       0.00653305, 0.0066093 , 0.008532  , 0.00949268, 0.00440316,
       0.0049809 , 0.00681815, 0.00577469, 0.00609612, 0.01148372,
       0.01583986, 0.0095015 , 0.00531073, 0.00955105, 0.01173658,
       0.0046339 , 0.00584083, 0.00791383, 0.00427418, 0.01473823]), 'std_score_time': array([0.00352783, 0.01444922, 0.01319126, 0.0233444 , 0.00440884,
       0.00060536, 0.0076471 , 0.00174363, 0.00446941, 0.00727054,
       0.01100167, 0.01172566, 0.00258392, 0.00623557, 0.01781685,
       0.00274351, 0.00344573, 0.00147597, 0.01081435, 0.00181418,
       0.00047124, 0.00093269, 0.00290892, 0.0043679 , 0.00280428,
       0.00720628, 0.00100531, 0.00073919, 0.0006428 , 0.00556123,
       0.00172036, 0.00170302, 0.00520034, 0.0034887 , 0.00138754,
       0.01164762, 0.00439208, 0.0010519 , 0.00445653, 0.01100602,
       0.0032208 , 0.00300014, 0.00509285, 0.0104055 , 0.00110076,
       0.00259745, 0.00336745, 0.00286782, 0.00258361, 0.00283271,
       0.02096082, 0.00464968, 0.00264702, 0.00499895, 0.01049182,
       0.00069052, 0.00304865, 0.00244134, 0.00102877, 0.00764315]), 'param_C': masked_array(data=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                   0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 1, 1, 1,
                   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10,
                   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
                   10, 10, 10, 10, 10],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_iter': masked_array(data=[100.0, 100.0, 200.0, 200.0, 300.0, 300.0, 400.0, 400.0,
                   500.0, 500.0, 600.0, 600.0, 700.0, 700.0, 800.0, 800.0,
                   900.0, 900.0, 1000.0, 1000.0, 100.0, 100.0, 200.0,
                   200.0, 300.0, 300.0, 400.0, 400.0, 500.0, 500.0, 600.0,
                   600.0, 700.0, 700.0, 800.0, 800.0, 900.0, 900.0,
                   1000.0, 1000.0, 100.0, 100.0, 200.0, 200.0, 300.0,
                   300.0, 400.0, 400.0, 500.0, 500.0, 600.0, 600.0, 700.0,
                   700.0, 800.0, 800.0, 900.0, 900.0, 1000.0, 1000.0],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_penalty': masked_array(data=['l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_solver': masked_array(data=['liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'C': 0.1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'newton-cg'}], 'split0_test_score': array([0.5995209 , 0.59947459, 0.5995209 , 0.59947459, 0.5995209 ,
       0.59947459, 0.5995209 , 0.59947459, 0.5995209 , 0.59947459,
       0.5995209 , 0.59947459, 0.5995209 , 0.59947459, 0.5995209 ,
       0.59947459, 0.5995209 , 0.59947459, 0.5995209 , 0.59947459,
       0.59516605, 0.59514161, 0.59516605, 0.59514161, 0.59516605,
       0.59514161, 0.59516605, 0.59514161, 0.59516605, 0.59514161,
       0.59516605, 0.59514161, 0.59516605, 0.59514161, 0.59516605,
       0.59514161, 0.59516605, 0.59514161, 0.59516605, 0.59514161,
       0.59404807, 0.59407766, 0.59404807, 0.59407766, 0.59404807,
       0.59407766, 0.59404807, 0.59407766, 0.59404807, 0.59407766,
       0.59404807, 0.59407766, 0.59404807, 0.59407766, 0.59404807,
       0.59407766, 0.59404807, 0.59407766, 0.59404807, 0.59407766]), 'split1_test_score': array([0.60176587, 0.60185721, 0.60176587, 0.60185721, 0.60176587,
       0.60185721, 0.60176587, 0.60185721, 0.60176587, 0.60185721,
       0.60176587, 0.60185721, 0.60176587, 0.60185721, 0.60176587,
       0.60185721, 0.60176587, 0.60185721, 0.60176587, 0.60185721,
       0.60131945, 0.60132074, 0.60131945, 0.60132074, 0.60131945,
       0.60132074, 0.60131945, 0.60132074, 0.60131945, 0.60132074,
       0.60131945, 0.60132074, 0.60131945, 0.60132074, 0.60131945,
       0.60132074, 0.60131945, 0.60132074, 0.60131945, 0.60132074,
       0.60128085, 0.60128214, 0.60128085, 0.60128214, 0.60128085,
       0.60128214, 0.60128085, 0.60128214, 0.60128085, 0.60128214,
       0.60128085, 0.60128214, 0.60128085, 0.60128214, 0.60128085,
       0.60128214, 0.60128085, 0.60128214, 0.60128085, 0.60128214]), 'split2_test_score': array([0.59251939, 0.59225807, 0.59251939, 0.59225807, 0.59251939,
       0.59225807, 0.59251939, 0.59225807, 0.59251939, 0.59225807,
       0.59251939, 0.59225807, 0.59251939, 0.59225807, 0.59251939,
       0.59225807, 0.59251939, 0.59225807, 0.59251939, 0.59225807,
       0.59167267, 0.59160734, 0.59167267, 0.59160734, 0.59167267,
       0.59160734, 0.59167267, 0.59160734, 0.59167267, 0.59160734,
       0.59167267, 0.59160734, 0.59167267, 0.59160734, 0.59167267,
       0.59160734, 0.59167267, 0.59160734, 0.59167267, 0.59160734,
       0.59141391, 0.59141391, 0.59141391, 0.59141391, 0.59141391,
       0.59141391, 0.59141391, 0.59141391, 0.59141391, 0.59141391,
       0.59141391, 0.59141391, 0.59141391, 0.59141391, 0.59141391,
       0.59141391, 0.59141391, 0.59141391, 0.59141391, 0.59141391]), 'split3_test_score': array([0.62356243, 0.62331008, 0.62356243, 0.62331008, 0.62356243,
       0.62331008, 0.62356243, 0.62331008, 0.62356243, 0.62331008,
       0.62356243, 0.62331008, 0.62356243, 0.62331008, 0.62356243,
       0.62331008, 0.62356243, 0.62331008, 0.62356243, 0.62331008,
       0.61382705, 0.61376301, 0.61382705, 0.61376301, 0.61382705,
       0.61376301, 0.61382705, 0.61376301, 0.61382705, 0.61376301,
       0.61382705, 0.61376301, 0.61382705, 0.61376301, 0.61382705,
       0.61376301, 0.61382705, 0.61376301, 0.61382705, 0.61376301,
       0.60899011, 0.60898883, 0.60899011, 0.60898883, 0.60899011,
       0.60898883, 0.60899011, 0.60898883, 0.60899011, 0.60898883,
       0.60899011, 0.60898883, 0.60899011, 0.60898883, 0.60899011,
       0.60898883, 0.60899011, 0.60898883, 0.60899011, 0.60898883]), 'split4_test_score': array([0.60055748, 0.60062153, 0.60055748, 0.60062153, 0.60055748,
       0.60062153, 0.60055748, 0.60062153, 0.60055748, 0.60062153,
       0.60055748, 0.60062153, 0.60055748, 0.60062153, 0.60055748,
       0.60062153, 0.60055748, 0.60062153, 0.60055748, 0.60062153,
       0.60028079, 0.60031153, 0.60028079, 0.60031153, 0.60028079,
       0.60031153, 0.60028079, 0.60031153, 0.60028079, 0.60031153,
       0.60028079, 0.60031153, 0.60028079, 0.60031153, 0.60028079,
       0.60031153, 0.60028079, 0.60031153, 0.60028079, 0.60031153,
       0.59735633, 0.59736658, 0.59735633, 0.59736658, 0.59735633,
       0.59736658, 0.59735633, 0.59736658, 0.59735633, 0.59736658,
       0.59735633, 0.59736658, 0.59735633, 0.59736658, 0.59735633,
       0.59736658, 0.59735633, 0.59736658, 0.59735633, 0.59736658]), 'mean_test_score': array([0.60358521, 0.6035043 , 0.60358521, 0.6035043 , 0.60358521,
       0.6035043 , 0.60358521, 0.6035043 , 0.60358521, 0.6035043 ,
       0.60358521, 0.6035043 , 0.60358521, 0.6035043 , 0.60358521,
       0.6035043 , 0.60358521, 0.6035043 , 0.60358521, 0.6035043 ,
       0.6004532 , 0.60042884, 0.6004532 , 0.60042884, 0.6004532 ,
       0.60042884, 0.6004532 , 0.60042884, 0.6004532 , 0.60042884,
       0.6004532 , 0.60042884, 0.6004532 , 0.60042884, 0.6004532 ,
       0.60042884, 0.6004532 , 0.60042884, 0.6004532 , 0.60042884,
       0.59861785, 0.59862582, 0.59861785, 0.59862582, 0.59861785,
       0.59862582, 0.59861785, 0.59862582, 0.59861785, 0.59862582,
       0.59861785, 0.59862582, 0.59861785, 0.59862582, 0.59861785,
       0.59862582, 0.59861785, 0.59862582, 0.59861785, 0.59862582]), 'std_test_score': array([0.01049321, 0.01044996, 0.01049321, 0.01044996, 0.01049321,
       0.01044996, 0.01049321, 0.01044996, 0.01049321, 0.01044996,
       0.01049321, 0.01044996, 0.01049321, 0.01044996, 0.01049321,
       0.01044996, 0.01049321, 0.01044996, 0.01049321, 0.01044996,
       0.00754575, 0.00754166, 0.00754575, 0.00754166, 0.00754575,
       0.00754166, 0.00754575, 0.00754166, 0.00754575, 0.00754166,
       0.00754575, 0.00754166, 0.00754575, 0.00754166, 0.00754575,
       0.00754166, 0.00754575, 0.00754166, 0.00754575, 0.00754166,
       0.00614893, 0.00614379, 0.00614893, 0.00614379, 0.00614893,
       0.00614379, 0.00614893, 0.00614379, 0.00614893, 0.00614379,
       0.00614893, 0.00614379, 0.00614893, 0.00614379, 0.00614893,
       0.00614379, 0.00614893, 0.00614379, 0.00614893, 0.00614379]), 'rank_test_score': array([ 1, 11,  1, 11,  1, 11,  1, 11,  1, 11,  1, 11,  1, 11,  1, 11,  1,
       11,  1, 11, 21, 31, 21, 31, 21, 31, 21, 31, 21, 31, 21, 31, 21, 31,
       21, 31, 21, 31, 21, 31, 51, 41, 51, 41, 51, 41, 51, 41, 51, 41, 51,
       41, 51, 41, 51, 41, 51, 41, 51, 41], dtype=int32)}
Y pred prob after predict proba:  (18995, 2)
first elements of Y pred prob after sigmoid: 
 [[0.92303588 0.07696412]
 [0.9654547  0.0345453 ]
 [0.94941648 0.05058352]
 [0.95920865 0.04079135]
 [0.9495495  0.0504505 ]
 [0.93194714 0.06805286]
 [0.93274019 0.06725981]
 [0.96835553 0.03164447]
 [0.92394955 0.07605045]
 [0.95367879 0.04632121]
 [0.91046493 0.08953507]
 [0.93353653 0.06646347]
 [0.9654155  0.0345845 ]
 [0.91699711 0.08300289]
 [0.94852804 0.05147196]
 [0.96000989 0.03999011]
 [0.96297451 0.03702549]
 [0.96500167 0.03499833]
 [0.9182003  0.0817997 ]
 [0.96211281 0.03788719]]
Y pred after predict:  (18995,)
