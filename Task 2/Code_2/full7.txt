Start reading data: 
 Time elapsed: 0:00:00.000097
Done reading data: 
 Time elapsed: 0:00:00.759827 

sizes: 
 train features: 		 (18995, 37) <class 'pandas.core.frame.DataFrame'> 
 train labels (sepsis) : 	 (18995, 1) <class 'pandas.core.frame.DataFrame'> 
 test features: 		 (151968, 37) <class 'pandas.core.frame.DataFrame'>

Start Scaling data: 
 Time elapsed: 0:00:00.759861
Done Scaling data: 
 Time elapsed: 0:00:00.900830 

df train features after scaling: 
,             0     1     2       3   ...     33     34       35     36
0          1.0   8.5  34.0  33.239  ...  1.831  6.962  114.500  7.372
1         10.0   6.5  71.0  32.833  ...  1.557  6.735  132.084  7.377
2        100.0   7.5  68.0  32.465  ...  1.691  7.169  117.390  7.366
3       1000.0   6.5  79.0  31.952  ...  1.606  6.982  140.390  7.364
4      10000.0   6.5  76.0  33.368  ...  1.638  7.190  123.032  7.377
...        ...   ...   ...     ...  ...    ...    ...      ...    ...
18990   9993.0   6.5  80.0  32.780  ...  1.415  7.879  101.643  7.370
18991   9995.0   6.5  73.0  32.572  ...  1.621  7.259  175.428  7.371
18992   9996.0  12.5  53.0  32.836  ...  1.708  7.198   99.250  7.381
18993   9998.0   6.5  89.0  32.878  ...  1.604  6.387  130.956  7.371
18994   9999.0   6.5  85.0  32.441  ...  1.563  7.425  127.761  7.374

[18995 rows x 37 columns]

df train labels sepsis after scaling: 
       LABEL_Sepsis
0               0.0
1               0.0
2               0.0
3               0.0
4               0.0
...             ...
18990           0.0
18991           0.0
18992           0.0
18993           0.0
18994           0.0

[18995 rows x 1 columns]

sizes: 
 X train: 	 (18995, 37) <class 'numpy.ndarray'> 
 X test: 	 (151968, 37) <class 'numpy.ndarray'> 
 Y train: 	 (18995,) <class 'numpy.ndarray'>
grid: 
 GridSearchCV(estimator=LogisticRegression(),
             param_grid={'C': [0.1, 1, 10],
                         'max_iter': array([ 100.,  200.,  300.,  400.,  500.,  600.,  700.,  800.,  900.,
       1000.]),
                         'penalty': ['l2'],
                         'solver': ['liblinear', 'newton-cg']},
             scoring='roc_auc')
Start fitting Grid Search CV: 
 Time elapsed: 0:00:00.955788
Fitting...
Done fitting Grid Search CV: 
 Time elapsed: 0:01:21.208840

Grid Search Best Score: 
 0.6024763380412217
Grid Search Best Estimator: 
 LogisticRegression(C=0.1, max_iter=100.0, solver='liblinear')
Grid Search Best Estimator: 
 LogisticRegression(C=0.1, max_iter=100.0, solver='liblinear')

Grid Search all CV Results: 
 {'mean_fit_time': array([0.18966713, 0.19053655, 0.19077983, 0.19053454, 0.18802924,
       0.18939557, 0.18960476, 0.19008412, 0.18781419, 0.20241332,
       0.19499779, 0.19679155, 0.18999257, 0.19548993, 0.19795575,
       0.1944644 , 0.18696909, 0.19125051, 0.18868828, 0.1914134 ,
       0.25907655, 0.29161997, 0.24825997, 0.29104877, 0.24890232,
       0.29212041, 0.25007772, 0.29254699, 0.27361541, 0.28930225,
       0.25213737, 0.28684468, 0.25428691, 0.29002576, 0.2505023 ,
       0.28900442, 0.25726213, 0.30108938, 0.25115294, 0.28753982,
       0.3072104 , 0.33950505, 0.30939593, 0.34272428, 0.31289263,
       0.34022379, 0.30985632, 0.33948236, 0.30755877, 0.34439735,
       0.31034307, 0.3378675 , 0.30731616, 0.33773317, 0.3122653 ,
       0.34070282, 0.31538615, 0.35689197, 0.31144829, 0.34108992]), 'std_fit_time': array([0.00736159, 0.01364914, 0.00835784, 0.0131549 , 0.00945967,
       0.00985164, 0.0150122 , 0.01187783, 0.00721941, 0.03532069,
       0.00949635, 0.01067748, 0.00648598, 0.01241652, 0.01595717,
       0.02148463, 0.00791399, 0.00757202, 0.01312219, 0.01375173,
       0.03378973, 0.00830222, 0.02815224, 0.0153238 , 0.02989538,
       0.01486135, 0.02104479, 0.01492348, 0.04399289, 0.02298235,
       0.0237153 , 0.01186859, 0.02640999, 0.01233719, 0.03028081,
       0.01796489, 0.02930372, 0.01995943, 0.02621826, 0.01551089,
       0.03092322, 0.05617099, 0.03270591, 0.05285071, 0.02997689,
       0.0499573 , 0.03139523, 0.05300153, 0.02887301, 0.04502826,
       0.02950255, 0.05418809, 0.03210628, 0.05505328, 0.0260665 ,
       0.04258495, 0.03524735, 0.06132771, 0.02968802, 0.04257421]), 'mean_score_time': array([0.00240798, 0.00229659, 0.00249019, 0.00214581, 0.00233898,
       0.00216722, 0.00240746, 0.00225191, 0.0024395 , 0.00211668,
       0.00252261, 0.00214462, 0.00248437, 0.00222101, 0.00272217,
       0.00214891, 0.00233989, 0.00217719, 0.00247493, 0.00211043,
       0.00233512, 0.00227027, 0.00238285, 0.00219226, 0.00234766,
       0.00227499, 0.00234046, 0.00225496, 0.0026968 , 0.00321894,
       0.00231433, 0.00217032, 0.00251284, 0.00239201, 0.00220723,
       0.00220113, 0.00240846, 0.00230117, 0.00223517, 0.00229645,
       0.00217881, 0.00228548, 0.00217686, 0.00235286, 0.00242658,
       0.00224261, 0.00225754, 0.00219364, 0.00228901, 0.00226812,
       0.00224385, 0.00237303, 0.00218425, 0.00247321, 0.00220046,
       0.00230503, 0.00254602, 0.00220227, 0.0023066 , 0.00224962]), 'std_score_time': array([9.90700088e-05, 1.77266328e-04, 2.30542930e-04, 9.35531416e-05,
       2.12423328e-05, 1.11363172e-04, 1.37672442e-04, 2.54290394e-04,
       2.48229398e-04, 7.68270346e-05, 1.92547742e-04, 7.68750235e-05,
       1.56373321e-04, 2.90178296e-04, 4.80886872e-04, 5.90838376e-05,
       1.10389604e-05, 5.86522110e-05, 2.11355487e-04, 5.90075917e-05,
       3.68821752e-05, 7.97776355e-05, 7.78294948e-05, 1.18240040e-04,
       2.20097413e-05, 1.80371368e-04, 2.35185638e-05, 1.37486219e-04,
       5.73097950e-04, 1.96270661e-03, 2.38378426e-04, 3.56146606e-05,
       4.34508022e-04, 1.49336263e-04, 3.66657700e-05, 7.31396392e-05,
       2.82364364e-04, 1.40687117e-04, 6.84243877e-05, 2.85459432e-04,
       2.89792266e-05, 2.95373582e-05, 2.72384644e-05, 2.65902357e-04,
       3.05638015e-04, 4.48757730e-05, 8.47147076e-05, 6.12106260e-05,
       1.96892951e-04, 4.56752754e-05, 1.10864650e-04, 2.97927460e-05,
       2.49151864e-05, 5.50200154e-04, 6.22033296e-05, 2.11252477e-04,
       6.27716853e-04, 5.14515911e-05, 2.34110758e-04, 8.25907011e-05]), 'param_C': masked_array(data=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                   0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 1, 1, 1,
                   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10,
                   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
                   10, 10, 10, 10, 10],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_iter': masked_array(data=[100.0, 100.0, 200.0, 200.0, 300.0, 300.0, 400.0, 400.0,
                   500.0, 500.0, 600.0, 600.0, 700.0, 700.0, 800.0, 800.0,
                   900.0, 900.0, 1000.0, 1000.0, 100.0, 100.0, 200.0,
                   200.0, 300.0, 300.0, 400.0, 400.0, 500.0, 500.0, 600.0,
                   600.0, 700.0, 700.0, 800.0, 800.0, 900.0, 900.0,
                   1000.0, 1000.0, 100.0, 100.0, 200.0, 200.0, 300.0,
                   300.0, 400.0, 400.0, 500.0, 500.0, 600.0, 600.0, 700.0,
                   700.0, 800.0, 800.0, 900.0, 900.0, 1000.0, 1000.0],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_penalty': masked_array(data=['l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_solver': masked_array(data=['liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'C': 0.1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'newton-cg'}], 'split0_test_score': array([0.59797323, 0.59790761, 0.59797323, 0.59790761, 0.59797323,
       0.59790761, 0.59797323, 0.59790761, 0.59797323, 0.59790761,
       0.59797323, 0.59790761, 0.59797323, 0.59790761, 0.59797323,
       0.59790761, 0.59797323, 0.59790761, 0.59797323, 0.59790761,
       0.59535131, 0.59533458, 0.59535131, 0.59533458, 0.59535131,
       0.59533458, 0.59535131, 0.59533458, 0.59535131, 0.59533458,
       0.59535131, 0.59533458, 0.59535131, 0.59533458, 0.59535131,
       0.59533458, 0.59535131, 0.59533458, 0.59535131, 0.59533458,
       0.59273968, 0.59275384, 0.59273968, 0.59275384, 0.59273968,
       0.59275384, 0.59273968, 0.59275384, 0.59273968, 0.59275384,
       0.59273968, 0.59275384, 0.59273968, 0.59275384, 0.59273968,
       0.59275384, 0.59273968, 0.59275384, 0.59273968, 0.59275384]), 'split1_test_score': array([0.60234351, 0.60236667, 0.60234351, 0.60236667, 0.60234351,
       0.60236667, 0.60234351, 0.60236667, 0.60234351, 0.60236667,
       0.60234351, 0.60236667, 0.60234351, 0.60236667, 0.60234351,
       0.60236667, 0.60234351, 0.60236667, 0.60234351, 0.60236667,
       0.6015626 , 0.60157547, 0.6015626 , 0.60157547, 0.6015626 ,
       0.60157547, 0.6015626 , 0.60157547, 0.6015626 , 0.60157547,
       0.6015626 , 0.60157547, 0.6015626 , 0.60157547, 0.6015626 ,
       0.60157547, 0.6015626 , 0.60157547, 0.6015626 , 0.60157547,
       0.60134132, 0.60134775, 0.60134132, 0.60134775, 0.60134132,
       0.60134775, 0.60134132, 0.60134775, 0.60134132, 0.60134775,
       0.60134132, 0.60134775, 0.60134132, 0.60134775, 0.60134132,
       0.60134775, 0.60134132, 0.60134775, 0.60134132, 0.60134775]), 'split2_test_score': array([0.59406936, 0.59369532, 0.59406936, 0.59369532, 0.59406936,
       0.59369532, 0.59406936, 0.59369532, 0.59406936, 0.59369532,
       0.59406936, 0.59369532, 0.59406936, 0.59369532, 0.59406936,
       0.59369532, 0.59406936, 0.59369532, 0.59406936, 0.59369532,
       0.5924041 , 0.59236439, 0.5924041 , 0.59236439, 0.5924041 ,
       0.59236439, 0.5924041 , 0.59236439, 0.5924041 , 0.59236439,
       0.5924041 , 0.59236439, 0.5924041 , 0.59236439, 0.5924041 ,
       0.59236439, 0.5924041 , 0.59236439, 0.5924041 , 0.59236439,
       0.59060562, 0.59059281, 0.59060562, 0.59059281, 0.59060562,
       0.59059281, 0.59060562, 0.59059281, 0.59060562, 0.59059281,
       0.59060562, 0.59059281, 0.59060562, 0.59059281, 0.59060562,
       0.59059281, 0.59060562, 0.59059281, 0.59060562, 0.59059281]), 'split3_test_score': array([0.61824384, 0.6171832 , 0.61824384, 0.6171832 , 0.61824384,
       0.6171832 , 0.61824384, 0.6171832 , 0.61824384, 0.6171832 ,
       0.61824384, 0.6171832 , 0.61824384, 0.6171832 , 0.61824384,
       0.6171832 , 0.61824384, 0.6171832 , 0.61824384, 0.6171832 ,
       0.60804988, 0.60797046, 0.60804988, 0.60797046, 0.60804988,
       0.60797046, 0.60804988, 0.60797046, 0.60804988, 0.60797046,
       0.60804988, 0.60797046, 0.60804988, 0.60797046, 0.60804988,
       0.60797046, 0.60804988, 0.60797046, 0.60804988, 0.60797046,
       0.60380602, 0.60379065, 0.60380602, 0.60379065, 0.60380602,
       0.60379065, 0.60380602, 0.60379065, 0.60380602, 0.60379065,
       0.60380602, 0.60379065, 0.60380602, 0.60379065, 0.60380602,
       0.60379065, 0.60380602, 0.60379065, 0.60380602, 0.60379065]), 'split4_test_score': array([0.59975175, 0.59936105, 0.59975175, 0.59936105, 0.59975175,
       0.59936105, 0.59975175, 0.59936105, 0.59975175, 0.59936105,
       0.59975175, 0.59936105, 0.59975175, 0.59936105, 0.59975175,
       0.59936105, 0.59975175, 0.59936105, 0.59975175, 0.59936105,
       0.59740373, 0.59740117, 0.59740373, 0.59740117, 0.59740373,
       0.59740117, 0.59740373, 0.59740117, 0.59740373, 0.59740117,
       0.59740373, 0.59740117, 0.59740373, 0.59740117, 0.59740373,
       0.59740117, 0.59740373, 0.59740117, 0.59740373, 0.59740117,
       0.59488534, 0.59490968, 0.59488534, 0.59490968, 0.59488534,
       0.59490968, 0.59488534, 0.59490968, 0.59488534, 0.59490968,
       0.59488534, 0.59490968, 0.59488534, 0.59490968, 0.59488534,
       0.59490968, 0.59488534, 0.59490968, 0.59488534, 0.59490968]), 'mean_test_score': array([0.60247634, 0.60210277, 0.60247634, 0.60210277, 0.60247634,
       0.60210277, 0.60247634, 0.60210277, 0.60247634, 0.60210277,
       0.60247634, 0.60210277, 0.60247634, 0.60210277, 0.60247634,
       0.60210277, 0.60247634, 0.60210277, 0.60247634, 0.60210277,
       0.59895432, 0.59892921, 0.59895432, 0.59892921, 0.59895432,
       0.59892921, 0.59895432, 0.59892921, 0.59895432, 0.59892921,
       0.59895432, 0.59892921, 0.59895432, 0.59892921, 0.59895432,
       0.59892921, 0.59895432, 0.59892921, 0.59895432, 0.59892921,
       0.5966756 , 0.59667894, 0.5966756 , 0.59667894, 0.5966756 ,
       0.59667894, 0.5966756 , 0.59667894, 0.5966756 , 0.59667894,
       0.5966756 , 0.59667894, 0.5966756 , 0.59667894, 0.5966756 ,
       0.59667894, 0.5966756 , 0.59667894, 0.5966756 , 0.59667894]), 'std_test_score': array([0.00833079, 0.00804103, 0.00833079, 0.00804103, 0.00833079,
       0.00804103, 0.00833079, 0.00804103, 0.00833079, 0.00804103,
       0.00833079, 0.00804103, 0.00833079, 0.00804103, 0.00833079,
       0.00804103, 0.00833079, 0.00804103, 0.00833079, 0.00804103,
       0.00543735, 0.00542402, 0.00543735, 0.00542402, 0.00543735,
       0.00542402, 0.00543735, 0.00542402, 0.00543735, 0.00542402,
       0.00543735, 0.00542402, 0.00543735, 0.00542402, 0.00543735,
       0.00542402, 0.00543735, 0.00542402, 0.00543735, 0.00542402,
       0.00506267, 0.00505869, 0.00506267, 0.00505869, 0.00506267,
       0.00505869, 0.00506267, 0.00505869, 0.00506267, 0.00505869,
       0.00506267, 0.00505869, 0.00506267, 0.00505869, 0.00506267,
       0.00505869, 0.00506267, 0.00505869, 0.00506267, 0.00505869]), 'rank_test_score': array([ 1, 11,  1, 11,  1, 11,  1, 11,  1, 11,  1, 11,  1, 11,  1, 11,  1,
       11,  1, 11, 21, 31, 21, 31, 21, 31, 21, 31, 21, 31, 21, 31, 21, 31,
       21, 31, 21, 31, 21, 31, 51, 41, 51, 41, 51, 41, 51, 41, 51, 41, 51,
       41, 51, 41, 51, 41, 51, 41, 51, 41], dtype=int32)}
Y pred prob after predict proba:  (18995, 2)
first elements of Y pred prob after sigmoid: 
 [[0.71542888 0.51951533]
 [0.72408549 0.5087945 ]
 [0.72066606 0.51305505]
 [0.72292237 0.51024753]
 [0.72081599 0.51286895]
 [0.71756542 0.51688927]
 [0.71758816 0.51686126]
 [0.72475234 0.50795965]
 [0.71610505 0.51868565]
 [0.72195432 0.51145388]
 [0.71250421 0.52308917]
 [0.71776865 0.51663881]
 [0.72419249 0.50866062]
 [0.71453146 0.52061451]
 [0.72076236 0.51293554]
 [0.72273968 0.5104754 ]
 [0.72374337 0.5092223 ]
 [0.7240572  0.50882989]
 [0.71467084 0.52044394]
 [0.72350143 0.50952464]]
Y pred after predict:  (18995,)
