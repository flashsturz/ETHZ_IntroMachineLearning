Start reading data: 
 Time elapsed: 0:00:00.000091
Done reading data: 
 Time elapsed: 0:00:00.719093 

sizes: 
 train features: 		 (18995, 37) <class 'pandas.core.frame.DataFrame'> 
 train labels (sepsis) : 	 (18995, 1) <class 'pandas.core.frame.DataFrame'> 
 test features: 		 (151968, 37) <class 'pandas.core.frame.DataFrame'>

Start Scaling data: 
 Time elapsed: 0:00:00.719133
Done Scaling data: 
 Time elapsed: 0:00:00.858637 

df train features after scaling: 
,             0     1     2       3   ...     33     34       35     36
0          1.0   8.5  34.0  33.239  ...  1.831  6.962  114.500  7.372
1         10.0   6.5  71.0  32.833  ...  1.557  6.735  132.084  7.377
2        100.0   7.5  68.0  32.465  ...  1.691  7.169  117.390  7.366
3       1000.0   6.5  79.0  31.952  ...  1.606  6.982  140.390  7.364
4      10000.0   6.5  76.0  33.368  ...  1.638  7.190  123.032  7.377
...        ...   ...   ...     ...  ...    ...    ...      ...    ...
18990   9993.0   6.5  80.0  32.780  ...  1.415  7.879  101.643  7.370
18991   9995.0   6.5  73.0  32.572  ...  1.621  7.259  175.428  7.371
18992   9996.0  12.5  53.0  32.836  ...  1.708  7.198   99.250  7.381
18993   9998.0   6.5  89.0  32.878  ...  1.604  6.387  130.956  7.371
18994   9999.0   6.5  85.0  32.441  ...  1.563  7.425  127.761  7.374

[18995 rows x 37 columns]

df train labels sepsis after scaling: 
       LABEL_Sepsis
0               0.0
1               0.0
2               0.0
3               0.0
4               0.0
...             ...
18990           0.0
18991           0.0
18992           0.0
18993           0.0
18994           0.0

[18995 rows x 1 columns]

sizes: 
 X train: 	 (18995, 37) <class 'numpy.ndarray'> 
 X test: 	 (151968, 37) <class 'numpy.ndarray'> 
 Y train: 	 (18995,) <class 'numpy.ndarray'>
grid: 
 GridSearchCV(estimator=LogisticRegression(),
             param_grid={'C': [0.1, 1, 10],
                         'max_iter': array([ 100.,  200.,  300.,  400.,  500.,  600.,  700.,  800.,  900.,
       1000.]),
                         'penalty': ['l2'],
                         'solver': ['liblinear', 'newton-cg']})
Start fitting Grid Search CV: 
 Time elapsed: 0:00:00.912834
Fitting...
Done fitting Grid Search CV: 
 Time elapsed: 0:01:23.296523

Grid Search Best Score: 
 0.942405896288497
Grid Search Best Estimator: 
 LogisticRegression(C=0.1, max_iter=100.0, solver='newton-cg')

Grid Search all CV Results: 
 {'mean_fit_time': array([0.19212375, 0.18756208, 0.19021559, 0.18479657, 0.18937306,
       0.18999543, 0.19365253, 0.186341  , 0.19024673, 0.18572698,
       0.18706322, 0.18568244, 0.19327502, 0.18618488, 0.1916791 ,
       0.18774457, 0.19217033, 0.18423891, 0.19297838, 0.18737555,
       0.25088639, 0.28271265, 0.25311723, 0.29045739, 0.25242124,
       0.29758325, 0.25267367, 0.28252134, 0.25506983, 0.28354774,
       0.25288286, 0.28484769, 0.25569482, 0.28724852, 0.25336618,
       0.28325005, 0.2535686 , 0.28437786, 0.25218201, 0.29104247,
       0.31003218, 0.33470917, 0.31219716, 0.33279963, 0.30808096,
       0.33756118, 0.31617746, 0.33493919, 0.31968937, 0.33250999,
       0.31439428, 0.37080984, 0.33797436, 0.43034801, 0.38691425,
       0.51747079, 0.46712117, 0.42137222, 0.31687703, 0.34210734]), 'std_fit_time': array([0.00652638, 0.01165477, 0.00475391, 0.00914558, 0.01156983,
       0.01302022, 0.00954987, 0.01274137, 0.00752108, 0.01322747,
       0.00668996, 0.00971793, 0.01548947, 0.01103025, 0.00837122,
       0.01284361, 0.00859072, 0.0081587 , 0.01004902, 0.01383125,
       0.02325098, 0.00930667, 0.02270066, 0.01102487, 0.02836722,
       0.03017907, 0.02525067, 0.01166863, 0.02335412, 0.00886966,
       0.02870448, 0.01782135, 0.03175811, 0.01706205, 0.02316826,
       0.00898275, 0.02975676, 0.0171383 , 0.02972973, 0.01902601,
       0.03132252, 0.04910538, 0.02842346, 0.04299338, 0.02678129,
       0.05319364, 0.03780364, 0.04764891, 0.03201969, 0.04448215,
       0.02847628, 0.05694227, 0.06290658, 0.13313914, 0.11156237,
       0.11868063, 0.11101499, 0.16068659, 0.02569609, 0.0514791 ]), 'mean_score_time': array([0.00099258, 0.00081491, 0.0010879 , 0.00071683, 0.00084815,
       0.00074883, 0.00090766, 0.00090175, 0.00099792, 0.00071783,
       0.00122471, 0.0007134 , 0.0009203 , 0.00075088, 0.00097666,
       0.00071921, 0.00095401, 0.00075517, 0.00090585, 0.00072398,
       0.00101843, 0.00072799, 0.00086265, 0.00077176, 0.00097017,
       0.00077176, 0.00089564, 0.00072222, 0.00087523, 0.00073299,
       0.00090928, 0.00074816, 0.00092463, 0.0007493 , 0.001054  ,
       0.00073667, 0.00093846, 0.00075312, 0.00086064, 0.00078378,
       0.00097165, 0.00081658, 0.00096626, 0.00074773, 0.00096445,
       0.00074124, 0.00091472, 0.00073781, 0.00085726, 0.00074697,
       0.00105262, 0.00079274, 0.00097642, 0.00085621, 0.00139899,
       0.00132222, 0.00222158, 0.00080709, 0.00100288, 0.00073872]), 'std_score_time': array([4.53101698e-05, 1.03397605e-04, 1.26901231e-04, 1.24385968e-05,
       1.01473367e-05, 7.81465257e-05, 6.36792772e-05, 3.88018642e-04,
       8.51555070e-05, 1.78348571e-05, 6.90711954e-04, 7.21175807e-06,
       6.51334075e-05, 8.31564358e-05, 5.10560124e-05, 1.26677245e-05,
       1.32526987e-04, 5.45166069e-05, 7.23165015e-05, 1.45740658e-05,
       7.36318408e-05, 2.67686205e-05, 1.55418194e-05, 5.46354264e-05,
       7.99381622e-06, 6.57931610e-05, 7.04079735e-05, 9.74825902e-06,
       2.70778856e-05, 5.02741064e-06, 5.59473263e-05, 1.34227754e-05,
       5.47390366e-05, 1.80980904e-05, 1.04838633e-04, 6.69510615e-06,
       4.87796256e-05, 1.65066947e-05, 8.76187467e-06, 8.84512492e-05,
       1.60160509e-05, 9.68933809e-05, 6.72728176e-05, 8.41100739e-06,
       1.23926299e-05, 2.97486776e-05, 4.15843559e-05, 2.12979198e-05,
       1.12118602e-05, 2.86273111e-05, 8.32711148e-05, 1.39675689e-04,
       8.39633738e-05, 2.53978368e-04, 6.58918690e-04, 9.89092749e-04,
       2.02411427e-03, 4.09504020e-05, 9.15994872e-05, 2.16971911e-05]), 'param_C': masked_array(data=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                   0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 1, 1, 1,
                   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10,
                   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
                   10, 10, 10, 10, 10],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_iter': masked_array(data=[100.0, 100.0, 200.0, 200.0, 300.0, 300.0, 400.0, 400.0,
                   500.0, 500.0, 600.0, 600.0, 700.0, 700.0, 800.0, 800.0,
                   900.0, 900.0, 1000.0, 1000.0, 100.0, 100.0, 200.0,
                   200.0, 300.0, 300.0, 400.0, 400.0, 500.0, 500.0, 600.0,
                   600.0, 700.0, 700.0, 800.0, 800.0, 900.0, 900.0,
                   1000.0, 1000.0, 100.0, 100.0, 200.0, 200.0, 300.0,
                   300.0, 400.0, 400.0, 500.0, 500.0, 600.0, 600.0, 700.0,
                   700.0, 800.0, 800.0, 900.0, 900.0, 1000.0, 1000.0],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_penalty': masked_array(data=['l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_solver': masked_array(data=['liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'C': 0.1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'newton-cg'}], 'split0_test_score': array([0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002]), 'split1_test_score': array([0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002,
       0.94209002, 0.94209002, 0.94209002, 0.94209002, 0.94209002]), 'split2_test_score': array([0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648]), 'split3_test_score': array([0.94235325, 0.94261648, 0.94235325, 0.94261648, 0.94235325,
       0.94261648, 0.94235325, 0.94261648, 0.94235325, 0.94261648,
       0.94235325, 0.94261648, 0.94235325, 0.94261648, 0.94235325,
       0.94261648, 0.94235325, 0.94261648, 0.94235325, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648]), 'split4_test_score': array([0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94261648, 0.94261648, 0.94261648, 0.94261648, 0.94261648,
       0.94235325, 0.94235325, 0.94235325, 0.94235325, 0.94235325,
       0.94235325, 0.94235325, 0.94235325, 0.94235325, 0.94235325,
       0.94235325, 0.94235325, 0.94235325, 0.94235325, 0.94235325,
       0.94235325, 0.94235325, 0.94235325, 0.94235325, 0.94235325]), 'mean_test_score': array([0.94235325, 0.9424059 , 0.94235325, 0.9424059 , 0.94235325,
       0.9424059 , 0.94235325, 0.9424059 , 0.94235325, 0.9424059 ,
       0.94235325, 0.9424059 , 0.94235325, 0.9424059 , 0.94235325,
       0.9424059 , 0.94235325, 0.9424059 , 0.94235325, 0.9424059 ,
       0.9424059 , 0.9424059 , 0.9424059 , 0.9424059 , 0.9424059 ,
       0.9424059 , 0.9424059 , 0.9424059 , 0.9424059 , 0.9424059 ,
       0.9424059 , 0.9424059 , 0.9424059 , 0.9424059 , 0.9424059 ,
       0.9424059 , 0.9424059 , 0.9424059 , 0.9424059 , 0.9424059 ,
       0.94235325, 0.94235325, 0.94235325, 0.94235325, 0.94235325,
       0.94235325, 0.94235325, 0.94235325, 0.94235325, 0.94235325,
       0.94235325, 0.94235325, 0.94235325, 0.94235325, 0.94235325,
       0.94235325, 0.94235325, 0.94235325, 0.94235325, 0.94235325]), 'std_test_score': array([0.00023544, 0.00025791, 0.00023544, 0.00025791, 0.00023544,
       0.00025791, 0.00023544, 0.00025791, 0.00023544, 0.00025791,
       0.00023544, 0.00025791, 0.00023544, 0.00025791, 0.00023544,
       0.00025791, 0.00023544, 0.00025791, 0.00023544, 0.00025791,
       0.00025791, 0.00025791, 0.00025791, 0.00025791, 0.00025791,
       0.00025791, 0.00025791, 0.00025791, 0.00025791, 0.00025791,
       0.00025791, 0.00025791, 0.00025791, 0.00025791, 0.00025791,
       0.00025791, 0.00025791, 0.00025791, 0.00025791, 0.00025791,
       0.00023544, 0.00023544, 0.00023544, 0.00023544, 0.00023544,
       0.00023544, 0.00023544, 0.00023544, 0.00023544, 0.00023544,
       0.00023544, 0.00023544, 0.00023544, 0.00023544, 0.00023544,
       0.00023544, 0.00023544, 0.00023544, 0.00023544, 0.00023544]), 'rank_test_score': array([51,  1, 51,  1, 51,  1, 51,  1, 51,  1, 51,  1, 51,  1, 51,  1, 51,
        1, 51,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
        1,  1,  1,  1,  1,  1, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
       31, 31, 31, 31, 31, 31, 31, 31, 31], dtype=int32)}
Done full script: 
 Time elapsed: 0:01:23.305342
