Start reading data: 
 Time elapsed: 0:00:00.000172
Done reading data: 
 Time elapsed: 0:00:01.265071 

sizes: 
 train features: 		 (18995, 35) <class 'pandas.core.frame.DataFrame'> 
 train labels (sepsis) : 	 (18995, 1) <class 'pandas.core.frame.DataFrame'> 
 test features: 		 (151968, 35) <class 'pandas.core.frame.DataFrame'>

Start Scaling data: 
 Time elapsed: 0:00:01.265107
Done Scaling data: 
 Time elapsed: 0:00:01.490051 

df train features after scaling: 
,          2       3       4       5   ...     33     34       35     36
0      34.0  33.239  35.762  16.733  ...  1.831  6.962  114.500  7.372
1      71.0  32.833  41.767  22.856  ...  1.557  6.735  132.084  7.377
2      68.0  32.465  39.885  22.707  ...  1.691  7.169  117.390  7.366
3      79.0  31.952  37.186  22.813  ...  1.606  6.982  140.390  7.364
4      76.0  33.368  34.386  24.110  ...  1.638  7.190  123.032  7.377
...     ...     ...     ...     ...  ...    ...    ...      ...    ...
18990  80.0  32.780  45.140  25.182  ...  1.415  7.879  101.643  7.370
18991  73.0  32.572  39.875  27.437  ...  1.621  7.259  175.428  7.371
18992  53.0  32.836  40.483  19.633  ...  1.708  7.198   99.250  7.381
18993  89.0  32.878  40.576  26.562  ...  1.604  6.387  130.956  7.371
18994  85.0  32.441  43.421  27.127  ...  1.563  7.425  127.761  7.374

[18995 rows x 35 columns]

df train labels sepsis after scaling: 
       LABEL_Sepsis
0               0.0
1               0.0
2               0.0
3               0.0
4               0.0
...             ...
18990           0.0
18991           0.0
18992           0.0
18993           0.0
18994           0.0

[18995 rows x 1 columns]

sizes: 
 X train: 	 (18995, 35) <class 'numpy.ndarray'> 
 X test: 	 (151968, 35) <class 'numpy.ndarray'> 
 Y train: 	 (18995,) <class 'numpy.ndarray'>
grid: 
 GridSearchCV(estimator=LogisticRegression(), n_jobs=2,
             param_grid={'C': [0.1, 1, 10],
                         'max_iter': array([ 100.,  200.,  300.,  400.,  500.,  600.,  700.,  800.,  900.,
       1000.]),
                         'penalty': ['l2'],
                         'solver': ['liblinear', 'newton-cg']},
             scoring='roc_auc')
Start fitting Grid Search CV: 
 Time elapsed: 0:00:01.597135
Fitting...
Done fitting Grid Search CV: 
 Time elapsed: 0:02:21.391264

Grid Search Best Score: 
 0.6035852136788037
Grid Search Best Estimator: 
 LogisticRegression(C=0.1, max_iter=100.0, solver='liblinear')

Grid Search all CV Results: 
 {'mean_fit_time': array([0.54152222, 0.82288666, 0.50639172, 1.48198819, 0.72057858,
       0.6841742 , 0.40230522, 0.69073825, 0.43581562, 0.66743841,
       0.39727073, 0.72971616, 0.86600084, 1.76783361, 0.96734986,
       1.2408843 , 0.84964418, 1.13419037, 0.85241952, 0.71075859,
       0.54998264, 0.98157673, 0.54938135, 0.96909261, 0.52877383,
       0.95848303, 0.54169226, 0.98842216, 0.54298368, 0.94253335,
       0.53323259, 0.96068597, 0.53113503, 0.97249451, 0.49482841,
       0.97419386, 0.54136691, 0.94286838, 0.55672445, 0.99505873,
       0.74087615, 1.15076194, 0.61414294, 1.18667889, 0.62572827,
       1.40884929, 1.24214115, 2.4887301 , 0.7050065 , 1.19513531,
       0.67241244, 1.17469473, 0.70076056, 1.24409347, 0.66455512,
       1.22646852, 0.69817448, 1.21286063, 0.67898889, 1.14406719]), 'std_fit_time': array([0.10069348, 0.05752421, 0.05219913, 0.52989506, 0.38861079,
       0.05400998, 0.045527  , 0.03608195, 0.06300187, 0.06483389,
       0.04025374, 0.05811486, 0.16696472, 0.23513887, 0.19302485,
       0.34967261, 0.1997797 , 0.12999928, 0.31907198, 0.11327913,
       0.11003253, 0.06102847, 0.08935437, 0.06731322, 0.08961479,
       0.06975582, 0.07627582, 0.05263496, 0.09765806, 0.06832877,
       0.08041165, 0.04836011, 0.06965338, 0.05860635, 0.04430761,
       0.07833594, 0.10942349, 0.04125979, 0.08202949, 0.02692508,
       0.13926604, 0.1885846 , 0.07493812, 0.12175972, 0.11270419,
       0.47874279, 0.47093356, 0.9782468 , 0.10302368, 0.11592725,
       0.09527272, 0.15612689, 0.02634901, 0.1121371 , 0.0927521 ,
       0.13350789, 0.08990429, 0.14998132, 0.09033581, 0.19924699]), 'mean_score_time': array([0.00562944, 0.006458  , 0.01055546, 0.01069684, 0.00877357,
       0.00679841, 0.00704784, 0.00674825, 0.01486945, 0.00524645,
       0.00385871, 0.00745072, 0.02598481, 0.01228495, 0.01016779,
       0.01567192, 0.01668081, 0.00817184, 0.01316261, 0.00416121,
       0.00717125, 0.00654697, 0.0055788 , 0.00706244, 0.00573182,
       0.00602956, 0.00601091, 0.00638742, 0.01094437, 0.00603719,
       0.00587101, 0.00521379, 0.00896902, 0.00466833, 0.00331759,
       0.00817351, 0.00498509, 0.00892115, 0.00470748, 0.00479789,
       0.00530186, 0.0058053 , 0.00468798, 0.00594702, 0.00294108,
       0.00676222, 0.01483126, 0.00642715, 0.00447593, 0.00511551,
       0.00750542, 0.00568323, 0.0069387 , 0.00653777, 0.00804815,
       0.00823259, 0.00699039, 0.00625243, 0.00426798, 0.0044004 ]), 'std_score_time': array([0.00229791, 0.00085987, 0.00990019, 0.00423676, 0.00962512,
       0.00267282, 0.00286777, 0.00292874, 0.01368259, 0.00192113,
       0.00072695, 0.00456386, 0.0221067 , 0.00979408, 0.00731326,
       0.00983825, 0.00668886, 0.00339081, 0.01427081, 0.00059617,
       0.002323  , 0.00494843, 0.00094157, 0.0020865 , 0.00183124,
       0.00070715, 0.00233964, 0.00291228, 0.00805498, 0.00211041,
       0.00248145, 0.00121868, 0.00594134, 0.00116761, 0.00052428,
       0.0038297 , 0.00226596, 0.00323627, 0.00099043, 0.00125631,
       0.00224139, 0.00198145, 0.00081603, 0.0014854 , 0.00053504,
       0.00385481, 0.01041499, 0.00316282, 0.00143058, 0.00067462,
       0.00302384, 0.00188035, 0.00364851, 0.00282827, 0.00425188,
       0.00328176, 0.00404091, 0.00396496, 0.0007751 , 0.00127826]), 'param_C': masked_array(data=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
                   0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 1, 1, 1,
                   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10,
                   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
                   10, 10, 10, 10, 10],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_max_iter': masked_array(data=[100.0, 100.0, 200.0, 200.0, 300.0, 300.0, 400.0, 400.0,
                   500.0, 500.0, 600.0, 600.0, 700.0, 700.0, 800.0, 800.0,
                   900.0, 900.0, 1000.0, 1000.0, 100.0, 100.0, 200.0,
                   200.0, 300.0, 300.0, 400.0, 400.0, 500.0, 500.0, 600.0,
                   600.0, 700.0, 700.0, 800.0, 800.0, 900.0, 900.0,
                   1000.0, 1000.0, 100.0, 100.0, 200.0, 200.0, 300.0,
                   300.0, 400.0, 400.0, 500.0, 500.0, 600.0, 600.0, 700.0,
                   700.0, 800.0, 800.0, 900.0, 900.0, 1000.0, 1000.0],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_penalty': masked_array(data=['l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'param_solver': masked_array(data=['liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False, False, False],
       fill_value='?',
            dtype=object), 'params': [{'C': 0.1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 300.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 400.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 500.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 600.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 700.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 800.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 900.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 1000.0, 'penalty': 'l2', 'solver': 'newton-cg'}], 'split0_test_score': array([0.5995209 , 0.59947459, 0.5995209 , 0.59947459, 0.5995209 ,
       0.59947459, 0.5995209 , 0.59947459, 0.5995209 , 0.59947459,
       0.5995209 , 0.59947459, 0.5995209 , 0.59947459, 0.5995209 ,
       0.59947459, 0.5995209 , 0.59947459, 0.5995209 , 0.59947459,
       0.59516605, 0.59514161, 0.59516605, 0.59514161, 0.59516605,
       0.59514161, 0.59516605, 0.59514161, 0.59516605, 0.59514161,
       0.59516605, 0.59514161, 0.59516605, 0.59514161, 0.59516605,
       0.59514161, 0.59516605, 0.59514161, 0.59516605, 0.59514161,
       0.59404807, 0.59407766, 0.59404807, 0.59407766, 0.59404807,
       0.59407766, 0.59404807, 0.59407766, 0.59404807, 0.59407766,
       0.59404807, 0.59407766, 0.59404807, 0.59407766, 0.59404807,
       0.59407766, 0.59404807, 0.59407766, 0.59404807, 0.59407766]), 'split1_test_score': array([0.60176587, 0.60185721, 0.60176587, 0.60185721, 0.60176587,
       0.60185721, 0.60176587, 0.60185721, 0.60176587, 0.60185721,
       0.60176587, 0.60185721, 0.60176587, 0.60185721, 0.60176587,
       0.60185721, 0.60176587, 0.60185721, 0.60176587, 0.60185721,
       0.60131945, 0.60132074, 0.60131945, 0.60132074, 0.60131945,
       0.60132074, 0.60131945, 0.60132074, 0.60131945, 0.60132074,
       0.60131945, 0.60132074, 0.60131945, 0.60132074, 0.60131945,
       0.60132074, 0.60131945, 0.60132074, 0.60131945, 0.60132074,
       0.60128085, 0.60128214, 0.60128085, 0.60128214, 0.60128085,
       0.60128214, 0.60128085, 0.60128214, 0.60128085, 0.60128214,
       0.60128085, 0.60128214, 0.60128085, 0.60128214, 0.60128085,
       0.60128214, 0.60128085, 0.60128214, 0.60128085, 0.60128214]), 'split2_test_score': array([0.59251939, 0.59225807, 0.59251939, 0.59225807, 0.59251939,
       0.59225807, 0.59251939, 0.59225807, 0.59251939, 0.59225807,
       0.59251939, 0.59225807, 0.59251939, 0.59225807, 0.59251939,
       0.59225807, 0.59251939, 0.59225807, 0.59251939, 0.59225807,
       0.59167267, 0.59160734, 0.59167267, 0.59160734, 0.59167267,
       0.59160734, 0.59167267, 0.59160734, 0.59167267, 0.59160734,
       0.59167267, 0.59160734, 0.59167267, 0.59160734, 0.59167267,
       0.59160734, 0.59167267, 0.59160734, 0.59167267, 0.59160734,
       0.59141391, 0.59141391, 0.59141391, 0.59141391, 0.59141391,
       0.59141391, 0.59141391, 0.59141391, 0.59141391, 0.59141391,
       0.59141391, 0.59141391, 0.59141391, 0.59141391, 0.59141391,
       0.59141391, 0.59141391, 0.59141391, 0.59141391, 0.59141391]), 'split3_test_score': array([0.62356243, 0.62331008, 0.62356243, 0.62331008, 0.62356243,
       0.62331008, 0.62356243, 0.62331008, 0.62356243, 0.62331008,
       0.62356243, 0.62331008, 0.62356243, 0.62331008, 0.62356243,
       0.62331008, 0.62356243, 0.62331008, 0.62356243, 0.62331008,
       0.61382705, 0.61376301, 0.61382705, 0.61376301, 0.61382705,
       0.61376301, 0.61382705, 0.61376301, 0.61382705, 0.61376301,
       0.61382705, 0.61376301, 0.61382705, 0.61376301, 0.61382705,
       0.61376301, 0.61382705, 0.61376301, 0.61382705, 0.61376301,
       0.60899011, 0.60898883, 0.60899011, 0.60898883, 0.60899011,
       0.60898883, 0.60899011, 0.60898883, 0.60899011, 0.60898883,
       0.60899011, 0.60898883, 0.60899011, 0.60898883, 0.60899011,
       0.60898883, 0.60899011, 0.60898883, 0.60899011, 0.60898883]), 'split4_test_score': array([0.60055748, 0.60062153, 0.60055748, 0.60062153, 0.60055748,
       0.60062153, 0.60055748, 0.60062153, 0.60055748, 0.60062153,
       0.60055748, 0.60062153, 0.60055748, 0.60062153, 0.60055748,
       0.60062153, 0.60055748, 0.60062153, 0.60055748, 0.60062153,
       0.60028079, 0.60031153, 0.60028079, 0.60031153, 0.60028079,
       0.60031153, 0.60028079, 0.60031153, 0.60028079, 0.60031153,
       0.60028079, 0.60031153, 0.60028079, 0.60031153, 0.60028079,
       0.60031153, 0.60028079, 0.60031153, 0.60028079, 0.60031153,
       0.59735633, 0.59736658, 0.59735633, 0.59736658, 0.59735633,
       0.59736658, 0.59735633, 0.59736658, 0.59735633, 0.59736658,
       0.59735633, 0.59736658, 0.59735633, 0.59736658, 0.59735633,
       0.59736658, 0.59735633, 0.59736658, 0.59735633, 0.59736658]), 'mean_test_score': array([0.60358521, 0.6035043 , 0.60358521, 0.6035043 , 0.60358521,
       0.6035043 , 0.60358521, 0.6035043 , 0.60358521, 0.6035043 ,
       0.60358521, 0.6035043 , 0.60358521, 0.6035043 , 0.60358521,
       0.6035043 , 0.60358521, 0.6035043 , 0.60358521, 0.6035043 ,
       0.6004532 , 0.60042884, 0.6004532 , 0.60042884, 0.6004532 ,
       0.60042884, 0.6004532 , 0.60042884, 0.6004532 , 0.60042884,
       0.6004532 , 0.60042884, 0.6004532 , 0.60042884, 0.6004532 ,
       0.60042884, 0.6004532 , 0.60042884, 0.6004532 , 0.60042884,
       0.59861785, 0.59862582, 0.59861785, 0.59862582, 0.59861785,
       0.59862582, 0.59861785, 0.59862582, 0.59861785, 0.59862582,
       0.59861785, 0.59862582, 0.59861785, 0.59862582, 0.59861785,
       0.59862582, 0.59861785, 0.59862582, 0.59861785, 0.59862582]), 'std_test_score': array([0.01049321, 0.01044996, 0.01049321, 0.01044996, 0.01049321,
       0.01044996, 0.01049321, 0.01044996, 0.01049321, 0.01044996,
       0.01049321, 0.01044996, 0.01049321, 0.01044996, 0.01049321,
       0.01044996, 0.01049321, 0.01044996, 0.01049321, 0.01044996,
       0.00754575, 0.00754166, 0.00754575, 0.00754166, 0.00754575,
       0.00754166, 0.00754575, 0.00754166, 0.00754575, 0.00754166,
       0.00754575, 0.00754166, 0.00754575, 0.00754166, 0.00754575,
       0.00754166, 0.00754575, 0.00754166, 0.00754575, 0.00754166,
       0.00614893, 0.00614379, 0.00614893, 0.00614379, 0.00614893,
       0.00614379, 0.00614893, 0.00614379, 0.00614893, 0.00614379,
       0.00614893, 0.00614379, 0.00614893, 0.00614379, 0.00614893,
       0.00614379, 0.00614893, 0.00614379, 0.00614893, 0.00614379]), 'rank_test_score': array([ 1, 11,  1, 11,  1, 11,  1, 11,  1, 11,  1, 11,  1, 11,  1, 11,  1,
       11,  1, 11, 21, 31, 21, 31, 21, 31, 21, 31, 21, 31, 21, 31, 21, 31,
       21, 31, 21, 31, 21, 31, 51, 41, 51, 41, 51, 41, 51, 41, 51, 41, 51,
       41, 51, 41, 51, 41, 51, 41, 51, 41], dtype=int32)}
Y pred prob after predict proba:  (18995, 2)
first elements of Y pred prob after sigmoid: 
 [[0.92303588 0.07696412]
 [0.9654547  0.0345453 ]
 [0.94941648 0.05058352]
 [0.95920865 0.04079135]
 [0.9495495  0.0504505 ]
 [0.93194714 0.06805286]
 [0.93274019 0.06725981]
 [0.96835553 0.03164447]
 [0.92394955 0.07605045]
 [0.95367879 0.04632121]
 [0.91046493 0.08953507]
 [0.93353653 0.06646347]
 [0.9654155  0.0345845 ]
 [0.91699711 0.08300289]
 [0.94852804 0.05147196]
 [0.96000989 0.03999011]
 [0.96297451 0.03702549]
 [0.96500167 0.03499833]
 [0.9182003  0.0817997 ]
 [0.96211281 0.03788719]]
Y pred after predict:  (18995,)
first elements of Y pred:  [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
Done full script: 
 Time elapsed: 0:02:21.405945
