Start reading data: 
 Time elapsed: 0:00:00.000128
Done reading data: 
 Time elapsed: 0:00:00.733218 

sizes: 
 train features: 		 (18995, 35) <class 'pandas.core.frame.DataFrame'> 
 train labels (sepsis) : 	 (18995, 1) <class 'pandas.core.frame.DataFrame'> 
 test features: 		 (151968, 35) <class 'pandas.core.frame.DataFrame'>

Start Scaling data: 
 Time elapsed: 0:00:00.733252
Done Scaling data: 
 Time elapsed: 0:00:00.864343 

df train features after scaling: 
,          2       3       4       5   ...     33     34       35     36
0      34.0  33.239  35.762  16.733  ...  1.831  6.962  114.500  7.372
1      71.0  32.833  41.767  22.856  ...  1.557  6.735  132.084  7.377
2      68.0  32.465  39.885  22.707  ...  1.691  7.169  117.390  7.366
3      79.0  31.952  37.186  22.813  ...  1.606  6.982  140.390  7.364
4      76.0  33.368  34.386  24.110  ...  1.638  7.190  123.032  7.377
...     ...     ...     ...     ...  ...    ...    ...      ...    ...
18990  80.0  32.780  45.140  25.182  ...  1.415  7.879  101.643  7.370
18991  73.0  32.572  39.875  27.437  ...  1.621  7.259  175.428  7.371
18992  53.0  32.836  40.483  19.633  ...  1.708  7.198   99.250  7.381
18993  89.0  32.878  40.576  26.562  ...  1.604  6.387  130.956  7.371
18994  85.0  32.441  43.421  27.127  ...  1.563  7.425  127.761  7.374

[18995 rows x 35 columns]

df train labels sepsis after scaling: 
       LABEL_Sepsis
0               0.0
1               0.0
2               0.0
3               0.0
4               0.0
...             ...
18990           0.0
18991           0.0
18992           0.0
18993           0.0
18994           0.0

[18995 rows x 1 columns]

sizes: 
 X train: 	 (18995, 35) <class 'numpy.ndarray'> 
 X test: 	 (151968, 35) <class 'numpy.ndarray'> 
 Y train: 	 (18995,) <class 'numpy.ndarray'>
grid: 
 GridSearchCV(estimator=LogisticRegression(random_state=42), n_jobs=2,
             param_grid={'C': [0.1, 1, 10],
                         'max_iter': array([100., 150., 200.]),
                         'penalty': ['l2'],
                         'solver': ['liblinear', 'newton-cg']},
             scoring='roc_auc')
Start fitting Grid Search CV: 
 Time elapsed: 0:00:00.923146
Fitting...
Done fitting Grid Search CV: 
 Time elapsed: 0:00:20.753224

Grid Search Best Score: 
 0.6035852136788037
Grid Search Best Estimator: 
 LogisticRegression(C=0.1, max_iter=100.0, random_state=42, solver='liblinear')

Grid Search all CV Results: 
 {'mean_fit_time': array([0.22866063, 0.34479952, 0.22920365, 0.33778124, 0.23593702,
       0.34439521, 0.31284642, 0.53124809, 0.32867322, 0.5130178 ,
       0.32871218, 0.51420565, 0.39043312, 0.60433121, 0.38820376,
       0.60375977, 0.39227958, 0.57962523]), 'std_fit_time': array([0.03245665, 0.0220363 , 0.02336707, 0.02384499, 0.01933941,
       0.02101039, 0.04822027, 0.0573254 , 0.04926896, 0.04487767,
       0.05546082, 0.03954503, 0.05102376, 0.07109908, 0.04407354,
       0.06839326, 0.04168771, 0.09450728]), 'mean_score_time': array([0.00397916, 0.00377636, 0.00334115, 0.00428905, 0.00329542,
       0.00475264, 0.00332813, 0.00352678, 0.00315747, 0.00394902,
       0.00340214, 0.00365572, 0.00318317, 0.00398202, 0.00308399,
       0.00424881, 0.00384521, 0.00425081]), 'std_score_time': array([0.00054871, 0.00061652, 0.00071389, 0.00050609, 0.0004671 ,
       0.00150524, 0.00049653, 0.00066569, 0.00035592, 0.00061738,
       0.00058259, 0.00050743, 0.00017163, 0.00072192, 0.00064952,
       0.00080116, 0.0006463 , 0.0012271 ]), 'param_C': masked_array(data=[0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 1, 1, 1, 1, 1, 1, 10, 10,
                   10, 10, 10, 10],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_max_iter': masked_array(data=[100.0, 100.0, 150.0, 150.0, 200.0, 200.0, 100.0, 100.0,
                   150.0, 150.0, 200.0, 200.0, 100.0, 100.0, 150.0, 150.0,
                   200.0, 200.0],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_penalty': masked_array(data=['l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2',
                   'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2', 'l2'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'param_solver': masked_array(data=['liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg', 'liblinear', 'newton-cg',
                   'liblinear', 'newton-cg'],
             mask=[False, False, False, False, False, False, False, False,
                   False, False, False, False, False, False, False, False,
                   False, False],
       fill_value='?',
            dtype=object), 'params': [{'C': 0.1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 150.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 150.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 0.1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 0.1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 150.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 150.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 1, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 100.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 150.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 150.0, 'penalty': 'l2', 'solver': 'newton-cg'}, {'C': 10, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'liblinear'}, {'C': 10, 'max_iter': 200.0, 'penalty': 'l2', 'solver': 'newton-cg'}], 'split0_test_score': array([0.5995209 , 0.59947459, 0.5995209 , 0.59947459, 0.5995209 ,
       0.59947459, 0.59516605, 0.59514161, 0.59516605, 0.59514161,
       0.59516605, 0.59514161, 0.59404807, 0.59407766, 0.59404807,
       0.59407766, 0.59404807, 0.59407766]), 'split1_test_score': array([0.60176587, 0.60185721, 0.60176587, 0.60185721, 0.60176587,
       0.60185721, 0.60131945, 0.60132074, 0.60131945, 0.60132074,
       0.60131945, 0.60132074, 0.60128085, 0.60128214, 0.60128085,
       0.60128214, 0.60128085, 0.60128214]), 'split2_test_score': array([0.59251939, 0.59225807, 0.59251939, 0.59225807, 0.59251939,
       0.59225807, 0.59167267, 0.59160734, 0.59167267, 0.59160734,
       0.59167267, 0.59160734, 0.59141391, 0.59141391, 0.59141391,
       0.59141391, 0.59141391, 0.59141391]), 'split3_test_score': array([0.62356243, 0.62331008, 0.62356243, 0.62331008, 0.62356243,
       0.62331008, 0.61382705, 0.61376301, 0.61382705, 0.61376301,
       0.61382705, 0.61376301, 0.60899011, 0.60898883, 0.60899011,
       0.60898883, 0.60899011, 0.60898883]), 'split4_test_score': array([0.60055748, 0.60062153, 0.60055748, 0.60062153, 0.60055748,
       0.60062153, 0.60028079, 0.60031153, 0.60028079, 0.60031153,
       0.60028079, 0.60031153, 0.59735633, 0.59736658, 0.59735633,
       0.59736658, 0.59735633, 0.59736658]), 'mean_test_score': array([0.60358521, 0.6035043 , 0.60358521, 0.6035043 , 0.60358521,
       0.6035043 , 0.6004532 , 0.60042884, 0.6004532 , 0.60042884,
       0.6004532 , 0.60042884, 0.59861785, 0.59862582, 0.59861785,
       0.59862582, 0.59861785, 0.59862582]), 'std_test_score': array([0.01049321, 0.01044996, 0.01049321, 0.01044996, 0.01049321,
       0.01044996, 0.00754575, 0.00754166, 0.00754575, 0.00754166,
       0.00754575, 0.00754166, 0.00614893, 0.00614379, 0.00614893,
       0.00614379, 0.00614893, 0.00614379]), 'rank_test_score': array([ 1,  4,  1,  4,  1,  4,  7, 10,  7, 10,  7, 10, 16, 13, 16, 13, 16,
       13], dtype=int32)}
type y_pred_decfct after sigmoid:  <class 'numpy.ndarray'>
[0.07696412 0.0345453  0.05058352 0.04079135 0.0504505  0.06805286
 0.06725981 0.03164447 0.07605045 0.04632121 0.08953507 0.06646347
 0.0345845  0.08300289 0.05147196 0.03999011 0.03702549 0.03499833
 0.0817997  0.03788719]

type y pred:  <class 'numpy.ndarray'>
[0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
